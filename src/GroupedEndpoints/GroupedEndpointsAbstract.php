<?php

namespace Knuckles\Scribe\GroupedEndpoints;

use Illuminate\Support\Str;
use Knuckles\Camel\Camel;
use Knuckles\Scribe\Commands\GenerateDocumentation;
use Knuckles\Scribe\Extracting\ApiDetails;
use Knuckles\Scribe\Tools\DocumentationConfig;
use Knuckles\Scribe\Tools\Utils;
use Symfony\Component\Yaml\Yaml;

abstract class GroupedEndpointsAbstract
{
    protected GenerateDocumentation $command;
    protected DocumentationConfig $docConfig;

    public static string $camelDir;
    public static string $cacheDir;

    public function __construct(GenerateDocumentation $command)
    {
        $this->command = $command;
        $this->docConfig = $command->getDocConfig();

        static::$camelDir = GenerateDocumentation::$camelDir;
        static::$cacheDir = GenerateDocumentation::$cacheDir;
    }

    public function get(): array
    {
        $groupedEndpoints = $this->extractEndpointsInfoAndWriteToDisk();
        $this->extractAndWriteApiDetailsToDisk();

        return $groupedEndpoints;
    }

    protected function extractAndWriteApiDetailsToDisk(): void
    {
        $apiDetails = new ApiDetails($this->docConfig, !$this->command->option('force'));
        $apiDetails->writeMarkdownFiles();
    }

    protected function writeEndpointsToDisk(array $grouped): void
    {
        Utils::deleteFilesMatching(static::$camelDir, function (array $file) {
            return !Str::startsWith($file['basename'], 'custom.');
        });
        Utils::deleteDirectoryAndContents(static::$cacheDir);

        if (!is_dir(static::$camelDir)) {
            mkdir(static::$camelDir, 0777, true);
        }

        if (!is_dir(static::$cacheDir)) {
            mkdir(static::$cacheDir, 0777, true);
        }

        $fileNameIndex = 0;
        foreach ($grouped as $group) {
            $yaml = Yaml::dump(
                $group,
                20,
                2,
                Yaml::DUMP_EMPTY_ARRAY_AS_SEQUENCE | Yaml::DUMP_OBJECT_AS_MAP | Yaml::DUMP_MULTI_LINE_LITERAL_BLOCK
            );
            if (
                count(Camel::$groupFileNames) == count($grouped)
                && isset(Camel::$groupFileNames[$group['name']])
            ) {
                $fileName = Camel::$groupFileNames[$group['name']];
            } else {
                $fileName = "$fileNameIndex.yaml";
                $fileNameIndex++;
            }

            file_put_contents(static::$camelDir . "/$fileName", $yaml);
            file_put_contents(static::$cacheDir . "/$fileName", "## Autogenerated by Scribe. DO NOT MODIFY.\n\n" . $yaml);
        }
    }

    abstract protected function extractEndpointsInfoAndWriteToDisk(): array;
}
